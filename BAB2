<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebGL Triangle Strip Example</title>
  <style>
    c {
      width: 100vw;
      height: 100vh;
      display: block;
    }
  </style>
</head>
<body>
  <canvas id="c" width="1720" height="1317"></canvas>

  <!-- Vertex Shader Source (GLSL) -->
  <script id="vertex-data" type="not-javascript">
    attribute vec4 vertex_points;
    void main() {
      gl_Position = vertex_points;
    }
  </script>

  <!-- Fragment Shader Source (GLSL) -->
  <script id="fragment-data" type="not-javascript">
    precision mediump float;
    void main() {
      gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0); // Pink
    }
  </script>

  <script>
    const canvas = document.querySelector("#c");
    const gl = canvas.getContext('webgl');

    if (!gl) {
      alert("WebGL not supported, please use a modern browser.");
      throw new Error("WebGL not supported");
    }

    const coordinates = new Float32Array([
      -0.7, 0.7,  // First vertex (top left)
      -0.7, -0.7,    // Second vertex (bottom left)
      0.7, 0.7,     // Third vertex (bottom right)
      0.7, -0.7,   // Fourth vertex (top right)
    ]);

    const pointsBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, coordinates, gl.STATIC_DRAW);

    const vsSource = document.getElementById("vertex-data").textContent;
    const fsSource = document.getElementById("fragment-data").textContent;

    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vsSource);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
      console.error('Vertex shader failed to compile:', gl.getShaderInfoLog(vertexShader));
    }

    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fsSource);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      console.error('Fragment shader failed to compile:', gl.getShaderInfoLog(fragmentShader));
    }

    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.error('WebGL program failed to link:', gl.getProgramInfoLog(program));
    }

    gl.useProgram(program);

    const pointsAttributeLocation = gl.getAttribLocation(program, "vertex_points");
    gl.vertexAttribPointer(pointsAttributeLocation, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(pointsAttributeLocation);

    gl.clearColor(0, 0, 0, 1); // Set clear color to black
    gl.clear(gl.COLOR_BUFFER_BIT); // Clear the canvas

    const mode = gl.TRIANGLE_STRIP; // Correct mode
    const first = 0;
    const count = 4;
    gl.drawArrays(mode, first, count);
  </script>
</body>
</html>
